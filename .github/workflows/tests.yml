name: Tests

on:
  workflow_call:

jobs:
  config:
    name: Read config
    uses: ./.github/workflows/config.yml

  validate_version:
    name: Validate version
    needs:
      - config
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ needs.config.outputs.latest_python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.config.outputs.latest_python }}
      - name: Cache virtualenv for Python ${{ needs.config.outputs.latest_python }}
        uses: syphar/restore-virtualenv@v1
      - name: Check tag ${{ github.ref_name }}
        run: |
          ref_name="${{ github.ref_name }}"
          tag_version="${ref_name/.dev/}"
          package_version="$(python setup.py --version)"

          if [ "${tag_version}" != "${package_version}" ]; then
            echo "Version number in package does not match tag! (${tag_version} vs. ${package_version})."
            exit 1
          fi

  prepare_tests:
    name: Prepare tests - Python ${{ matrix.python_version }}
    needs:
      - config
      - validate_version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ${{ fromJson(needs.config.outputs.config).python_version }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Cache virtualenv for Python ${{ matrix.python_version }}
        uses: syphar/restore-virtualenv@v1
        id: cache_virtualenv
      - name: Cache pip download for Python ${{ matrix.python_version }}
        uses: syphar/restore-pip-download-cache@v1
        if: steps.cache_virtualenv.outputs.cache-hit != 'true'
      - name: Install requirements
        run: pip install -r requirements.txt
        if: steps.cache_virtualenv.outputs.cache-hit != 'true'
      - name: Install development requirements
        run: pip install -r requirements-dev.txt
        if: steps.cache_virtualenv.outputs.cache-hit != 'true'

  tests:
    name: Tests - Python ${{ matrix.python_version }}
    needs:
      - config
      - prepare_tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ${{ fromJson(needs.config.outputs.config).python_version }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Cache virtualenv for Python ${{ matrix.python_version }}
        uses: syphar/restore-virtualenv@v1
        id: cache_virtualenv
      - name: Run unit tests
        run: pytest --cov=src --cov-report=term-missing --junitxml=junit/test-results.xml --cov-report=xml
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: python-${{ matrix.python_version }}-coverage
          path: .coverage
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python_version }}
          path: junit/test-results.xml
        if: ${{ always() }}

  security:
    name: Security
    needs:
      - config
      - prepare_tests
    continue-on-error: True
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ needs.config.outputs.latest_python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.config.outputs.latest_python }}
      - name: Cache virtualenv for Python ${{ needs.config.outputs.latest_python }}
        uses: syphar/restore-virtualenv@v1
        id: cache_virtualenv
      - name: Audit packages
        run: pip-audit

  code_analyse:
    name: Code analyse - Python ${{ matrix.python_version }}
    runs-on: ubuntu-latest
    needs:
      - config
      - prepare_tests
    strategy:
      matrix:
        python_version: ${{ fromJson(needs.config.outputs.config).python_version }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Cache virtualenv for Python ${{ matrix.python_version }}
        uses: syphar/restore-virtualenv@v1
      - name: Check code format with black
        run: |
          black --version
          black --diff --check $(git ls-files '*.py')
      - name: Lint with flake8
        run: |
          flake8 --version
          flake8 --show-source --statistics $(git ls-files '*.py')
      - name: Lint with mypy
        run: mypy $(git ls-files '*.py')
      - name: Lint with pylint
        run: |
          pylint --version
          pylint $(git ls-files '*.py')
      - name: Lint with yamllint
        run: |
          yamllint --version
          yamllint $(git ls-files '*.yaml') $(git ls-files '*.yml')

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs:
      - config
      - tests
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Download coverage
        uses: actions/download-artifact@v3
        with:
          name: python-${{ needs.config.outputs.latest_python }}-coverage
      - name: Create coverage badge
        uses: tj-actions/coverage-badge-py@v2
      - name: Verify coverage badge changed
        uses: tj-actions/verify-changed-files@v14
        id: changed_files
        with:
          files: coverage.svg
      - name: Commit coverage badge
        if: steps.changed_files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "noreply@superbox.one"
          git config --local user.name "Github Workflow"
          git add coverage.svg
          git commit -m "Updated coverage.svg"
      - name: Push changes
        if: steps.changed_files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
